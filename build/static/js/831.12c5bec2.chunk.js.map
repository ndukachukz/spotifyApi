{"version":3,"file":"static/js/831.12c5bec2.chunk.js","mappings":"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","sources":["App/hooks.ts","components/MusicCard/index.tsx","../node_modules/@chakra-ui/image/dist/chakra-ui-image.esm.js"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport {RootState, AppDispatch } from './store'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import {\r\n  Box,\r\n  Center,\r\n  useColorModeValue,\r\n  Text,\r\n  Stack,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAppSelector } from \"../../App/hooks\";\r\n\r\nconst MusicCard = ({ ...props }: any) => {\r\n  const {\r\n    spotifyWebApi: { setSpotifyWebApi: spotifyApi },\r\n    userLibrary,\r\n    newReleases,\r\n  } = useAppSelector((state) => state);\r\n\r\n  const [text, setText] = useState<string>();\r\n\r\n\r\n  const onAddClick = () =>\r\n    spotifyApi\r\n      .addToMySavedAlbums([props?.id])\r\n      .then(function (data) {\r\n        // console.log(\"Added album! =>\", data);\r\n      })\r\n      .catch((err) =>{ /* console.log(err) */});\r\n\r\n  return (\r\n    <Center py={12}>\r\n      <Box\r\n        role={\"group\"}\r\n        p={6}\r\n        maxW={\"230px\"}\r\n        w={\"full\"}\r\n        bg={useColorModeValue(\"white\", \"gray.800\")}\r\n        boxShadow={\"2xl\"}\r\n        rounded={\"lg\"}\r\n        pos={\"relative\"}\r\n        zIndex={1}\r\n      >\r\n        <Box\r\n          rounded={\"lg\"}\r\n          mt={-12}\r\n          pos={\"relative\"}\r\n          height={\"110px\"}\r\n          _after={{\r\n            transition: \"all .3s ease\",\r\n            content: '\"\"',\r\n            w: \"full\",\r\n            h: \"full\",\r\n            pos: \"absolute\",\r\n            top: 5,\r\n            left: 0,\r\n            backgroundImage: `url(${props.images[1].url})`,\r\n            filter: \"blur(15px)\",\r\n            zIndex: -1,\r\n          }}\r\n          _groupHover={{\r\n            _after: {\r\n              filter: \"blur(20px)\",\r\n            },\r\n          }}\r\n        >\r\n          <Image\r\n            rounded={\"lg\"}\r\n            height={130}\r\n            width={182}\r\n            objectFit={\"cover\"}\r\n            src={props.images[1].url}\r\n          />\r\n        </Box>\r\n        <Stack pt={10} align={\"center\"}>\r\n          <Text color={\"gray.500\"} fontSize={\"sm\"} textTransform={\"uppercase\"}>\r\n            {props.name}\r\n          </Text>\r\n          <Stack direction={\"row\"} align={\"center\"}>\r\n            <Text color={\"gray.600\"} as={\"button\"} onClick={() => onAddClick()}>\r\n              {text}\r\n            </Text>\r\n          </Stack>\r\n        </Stack>\r\n      </Box>\r\n    </Center>\r\n  );\r\n};\r\n\r\nexport default MusicCard;\r\n","import { forwardRef, chakra } from '@chakra-ui/system';\nimport { omit, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport { useState, useEffect, useRef, useCallback } from 'react';\nimport { useSafeLayoutEffect } from '@chakra-ui/hooks';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nfunction useImage(props) {\n  var loading = props.loading,\n      src = props.src,\n      srcSet = props.srcSet,\n      onLoad = props.onLoad,\n      onError = props.onError,\n      crossOrigin = props.crossOrigin,\n      sizes = props.sizes,\n      ignoreFallback = props.ignoreFallback;\n\n  var _useState = useState(\"pending\"),\n      status = _useState[0],\n      setStatus = _useState[1];\n\n  useEffect(function () {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  var imageRef = useRef();\n  var load = useCallback(function () {\n    if (!src) return;\n    flush();\n    var img = new Image();\n    img.src = src;\n    if (crossOrigin) img.crossOrigin = crossOrigin;\n    if (srcSet) img.srcset = srcSet;\n    if (sizes) img.sizes = sizes;\n    if (loading) img.loading = loading;\n\n    img.onload = function (event) {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(event);\n    };\n\n    img.onerror = function (error) {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);\n\n  var flush = function flush() {\n    if (imageRef.current) {\n      imageRef.current.onload = null;\n      imageRef.current.onerror = null;\n      imageRef.current = null;\n    }\n  };\n\n  useSafeLayoutEffect(function () {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined;\n\n    if (status === \"loading\") {\n      load();\n    }\n\n    return function () {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n\n  return ignoreFallback ? \"loaded\" : status;\n}\nvar shouldShowFallbackImage = function shouldShowFallbackImage(status, fallbackStrategy) {\n  return status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\" || status === \"failed\" && fallbackStrategy === \"onError\";\n};\n\nvar _excluded = [\"htmlWidth\", \"htmlHeight\", \"alt\"],\n    _excluded2 = [\"fallbackSrc\", \"fallback\", \"src\", \"srcSet\", \"align\", \"fit\", \"loading\", \"ignoreFallback\", \"crossOrigin\", \"fallbackStrategy\", \"referrerPolicy\"];\nvar NativeImage = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var htmlWidth = props.htmlWidth,\n      htmlHeight = props.htmlHeight,\n      alt = props.alt,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"img\", _extends({\n    width: htmlWidth,\n    height: htmlHeight,\n    ref: ref,\n    alt: alt\n  }, rest));\n});\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nvar Image$1 = /*#__PURE__*/forwardRef(function (props, ref) {\n  var fallbackSrc = props.fallbackSrc,\n      fallback = props.fallback,\n      src = props.src,\n      srcSet = props.srcSet,\n      align = props.align,\n      fit = props.fit,\n      loading = props.loading,\n      ignoreFallback = props.ignoreFallback,\n      crossOrigin = props.crossOrigin,\n      _props$fallbackStrate = props.fallbackStrategy,\n      fallbackStrategy = _props$fallbackStrate === void 0 ? \"beforeLoadOrError\" : _props$fallbackStrate,\n      referrerPolicy = props.referrerPolicy,\n      rest = _objectWithoutPropertiesLoose(props, _excluded2);\n\n  var providedFallback = fallbackSrc !== undefined || fallback !== undefined;\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   *\n   * shouldIgnoreFallbackImage determines if we have the possibility to render a fallback image\n   */\n\n  var shouldIgnoreFallbackImage = loading != null || // use can opt out of fallback image\n  ignoreFallback || // if the user doesn't provide any kind of fallback we should ignore it\n  !providedFallback;\n  /**\n   * returns `loaded` if fallback is ignored\n   */\n\n  var status = useImage(_extends({}, props, {\n    ignoreFallback: shouldIgnoreFallbackImage\n  }));\n  var showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);\n\n  var shared = _extends({\n    ref: ref,\n    objectFit: fit,\n    objectPosition: align\n  }, shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"]));\n\n  if (showFallbackImage) {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback;\n    return /*#__PURE__*/React.createElement(chakra.img, _extends({\n      as: NativeImage,\n      className: \"chakra-image__placeholder\",\n      src: fallbackSrc\n    }, shared));\n  }\n\n  return /*#__PURE__*/React.createElement(chakra.img, _extends({\n    as: NativeImage,\n    src: src,\n    srcSet: srcSet,\n    crossOrigin: crossOrigin,\n    loading: loading,\n    referrerPolicy: referrerPolicy,\n    className: \"chakra-image\"\n  }, shared));\n});\n\n/**\n * Fallback component for most SSR users who want to use the native `img` with\n * support for chakra props\n */\nvar Img = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(chakra.img, _extends({\n    ref: ref,\n    as: NativeImage,\n    className: \"chakra-image\"\n  }, props));\n});\n\nif (__DEV__) {\n  Image$1.displayName = \"Image\";\n}\n\nexport { Image$1 as Image, Img, shouldShowFallbackImage, useImage };\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","props","state","spotifyApi","spotifyWebApi","setSpotifyWebApi","userLibrary","newReleases","useState","text","py","role","p","maxW","w","bg","useColorModeValue","boxShadow","rounded","pos","zIndex","mt","height","_after","transition","content","h","top","left","backgroundImage","images","url","filter","_groupHover","width","objectFit","src","pt","align","color","fontSize","textTransform","name","direction","as","onClick","addToMySavedAlbums","id","then","data","catch","err","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","useImage","loading","srcSet","onLoad","onError","crossOrigin","sizes","ignoreFallback","_useState","status","setStatus","useEffect","imageRef","useRef","load","useCallback","flush","img","Image","srcset","onload","event","onerror","error","current","useSafeLayoutEffect","_excluded","_excluded2","NativeImage","React","ref","htmlWidth","htmlHeight","alt","rest","Image$1","forwardRef","fallbackSrc","fallback","fit","_props$fallbackStrate","fallbackStrategy","referrerPolicy","shouldIgnoreFallbackImage","undefined","showFallbackImage","shouldShowFallbackImage","shared","objectPosition","omit","chakra","className","__DEV__","displayName"],"sourceRoot":""}