{"version":3,"file":"static/js/293.c7998ac7.chunk.js","mappings":"gMAGaA,EAAiB,kBAAMC,EAAAA,EAAAA,OAEvBC,EAAkDC,EAAAA,I,kHCiC/D,EA/ByB,WAEvB,IAAMC,EAAa,IAAIC,IAAJ,CAAkB,CACnCC,SCV6BC,mCDW7BC,aCTFD,qCDYME,EAAmBC,aAAaC,QAAQ,UACxCC,EAAeC,KAAKC,MAAML,GAG1BM,EAAgB,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAcI,aACjCC,EAAiB,OAAGL,QAAH,IAAGA,OAAH,EAAGA,EAAcM,cAElCC,GAAWC,EAAAA,EAAAA,MACXC,GAAWrB,EAAAA,EAAAA,KAajB,OAXAsB,EAAAA,EAAAA,YAAU,YAEa,MAAjBV,GAEHO,EAAS,SAEVf,EAAWmB,eAAeR,GAC1BX,EAAWoB,gBAAgBP,GAC3BI,GAASI,EAAAA,EAAAA,GAAiBrB,MACzB,IAEIA,I,iIEuCT,UAjEiB,WACf,IAAMA,GAA4BsB,EAAAA,EAAAA,KAC5BP,GAAWC,EAAAA,EAAAA,MACXC,GAAWrB,EAAAA,EAAAA,KAGjB,GAIIE,EAAAA,EAAAA,IAAe,SAACyB,GAAD,OAAWA,KAH5BC,EADF,EACEA,cAEAC,GAHF,EAEEC,YAFF,EAGED,WA4CF,OAzCAP,EAAAA,EAAAA,YAAU,YACLO,EAAUb,aAAae,OAAS,IAAMF,EAAUX,cAAca,OAAS,KAAIZ,EAAS,SAGvFf,EAAW4B,QAAQC,MACjB,SAAUC,GACRb,GACEc,EAAAA,EAAAA,GAAQ,CACNC,QAASF,EAAKG,KAAKD,QACnBE,aAAcJ,EAAKG,KAAKC,aACxBC,MAAOL,EAAKG,KAAKE,MACjBC,cAAeN,EAAKG,KAAKG,cACzBC,UAAWP,EAAKG,KAAKI,UACrBC,KAAMR,EAAKG,KAAKK,KAChBC,GAAIT,EAAKG,KAAKM,GACdC,OAAQV,EAAKG,KAAKO,OAClBC,QAASX,EAAKG,KAAKQ,QACnBC,KAAMZ,EAAKG,KAAKS,KAChBC,IAAKb,EAAKG,KAAKU,OAKnB3C,EAAW4C,mBAAmBf,MAC5B,SAAUgB,GAER5B,GAAS6B,EAAAA,EAAAA,IAAe,OAAID,EAAYZ,KAAKc,YAE/C,SAAUC,GACTjC,EAAS,cAId,SAAUiC,GACTjC,EAAS,cAKX,KAGD,UAAC,KAAD,YACE,SAAC,KAAD,CAAakC,MAAO,IAGlBzB,EAAc0B,KAAI,SAACC,EAAWC,GAAZ,OAChB,SAAC,MAAD,UAA8BD,GAAPC","sources":["App/hooks.ts","Hooks/useSpotifyWebApi.tsx","constants/envVars.ts","pages/Home.tsx"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport {RootState, AppDispatch } from './store'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport { SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET } from \"../constants/envVars\";\r\nimport { setSpotifyWebApi } from \"../features/spotifyWebApi/spotifyWebApiSlice\";\r\n\r\nconst useSpotifyWebApi = ():SpotifyWebApi  => {\r\n\r\n  const spotifyApi = new SpotifyWebApi({\r\n    clientId: SPOTIFY_CLIENT_ID,\r\n    clientSecret: SPOTIFY_CLIENT_SECRET,\r\n  })\r\n\r\n  const localTokens: any = localStorage.getItem(\"tokens\");\r\n  const _localTokens = JSON.parse(localTokens)\r\n\r\n\r\n  const localAccessToken = _localTokens?.access_token;\r\n  const localRefreshToken = _localTokens?.refresh_token;\r\n\r\n  const navigate = useNavigate();\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !!_localTokens === false\r\n    ){\r\n     navigate(\"/auth\");\r\n    }\r\n    spotifyApi.setAccessToken(localAccessToken);\r\n    spotifyApi.setRefreshToken(localRefreshToken);\r\n    dispatch(setSpotifyWebApi(spotifyApi));\r\n  }, []);\r\n\r\n  return spotifyApi;\r\n};\r\n\r\nexport default useSpotifyWebApi;\r\n","export const SPOTIFY_CLIENT_ID = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\r\nexport const SPOTIFY_CLIENT_SECRET =\r\n  process.env.REACT_APP_SPOTIFY_CLIENT_SECRET;\r\nexport const SPOTIFY_REDIRECT_URL = process.env.REACT_APP_SPOTIFY_REDIRECT_URL;\r\n","import { FC, ReactElement, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport { Layout, NewReleases, SearchResultItem } from \"../components\";\r\nimport { setUser } from \"../features/user/userSlice\";\r\nimport { setUserLibrary } from \"../features/userLibrary/userLibrarySlice\";\r\nimport useSpotifyWebApi from \"../Hooks/useSpotifyWebApi\";\r\n\r\nconst Home: FC = (): ReactElement => {\r\n  const spotifyApi: SpotifyWebApi = useSpotifyWebApi();\r\n  const navigate = useNavigate();\r\n  const dispatch = useAppDispatch();\r\n\r\n  // REDUX STATES\r\n  const {\r\n    searchResults,\r\n    newReleases,\r\n    authToken, \r\n  } = useAppSelector((state) => state);\r\n\r\n  useEffect(() => {\r\n    if(authToken.access_token.length < 10 || authToken.refresh_token.length < 10) navigate(\"/auth\")\r\n\r\n\r\n    spotifyApi.getMe().then(\r\n      function (data) {\r\n        dispatch(\r\n          setUser({\r\n            country: data.body.country,\r\n            display_name: data.body.display_name,\r\n            email: data.body.email,\r\n            external_urls: data.body.external_urls,\r\n            followers: data.body.followers,\r\n            href: data.body.href,\r\n            id: data.body.id,\r\n            images: data.body.images,\r\n            product: data.body.product,\r\n            type: data.body.type,\r\n            uri: data.body.uri,\r\n          })\r\n        );\r\n        // Save user to DB\r\n\r\n        spotifyApi.getMySavedAlbums().then(\r\n          function (userLibData) {\r\n            // Output items\r\n            dispatch(setUserLibrary([...userLibData.body.items]));\r\n          },\r\n          function (err) {\r\n           navigate(\"auth\")\r\n          }\r\n        );\r\n      },\r\n      function (err) {\r\n       navigate(\"/auth\")\r\n      }\r\n    );\r\n\r\n    return;\r\n  }, []);\r\n\r\n  return (\r\n    <Layout>\r\n      <NewReleases limit={5} />\r\n\r\n      {\r\n        searchResults.map((item: any, i: number) => (\r\n          <SearchResultItem key={i} {...item} />\r\n        ))}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","spotifyApi","SpotifyWebApi","clientId","process","clientSecret","localTokens","localStorage","getItem","_localTokens","JSON","parse","localAccessToken","access_token","localRefreshToken","refresh_token","navigate","useNavigate","dispatch","useEffect","setAccessToken","setRefreshToken","setSpotifyWebApi","useSpotifyWebApi","state","searchResults","authToken","newReleases","length","getMe","then","data","setUser","country","body","display_name","email","external_urls","followers","href","id","images","product","type","uri","getMySavedAlbums","userLibData","setUserLibrary","items","err","limit","map","item","i"],"sourceRoot":""}