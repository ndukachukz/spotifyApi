{"version":3,"file":"static/js/382.7ed809fa.chunk.js","mappings":"gMAGaA,EAAiB,kBAAMC,EAAAA,EAAAA,OAEvBC,EAAkDC,EAAAA,I,kHCiC/D,EA/ByB,WAEvB,IAAMC,EAAa,IAAIC,IAAJ,CAAkB,CACnCC,SCV6BC,mCDW7BC,aCTFD,qCDYME,EAAmBC,aAAaC,QAAQ,UACxCC,EAAeC,KAAKC,MAAML,GAG1BM,EAAgB,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAcI,aACjCC,EAAiB,OAAGL,QAAH,IAAGA,OAAH,EAAGA,EAAcM,cAElCC,GAAWC,EAAAA,EAAAA,MACXC,GAAWrB,EAAAA,EAAAA,KAajB,OAXAsB,EAAAA,EAAAA,YAAU,YAEa,MAAjBV,GAEHO,EAAS,SAEVf,EAAWmB,eAAeR,GAC1BX,EAAWoB,gBAAgBP,GAC3BI,GAASI,EAAAA,EAAAA,GAAiBrB,MACzB,IAEIA,I,0IE4BT,UApDA,WACE,IAAMA,GAA4BsB,EAAAA,EAAAA,KAC5BP,GAAWC,EAAAA,EAAAA,MAEXC,GAAWrB,EAAAA,EAAAA,KAGjB,GAIIE,EAAAA,EAAAA,IAAe,SAACyB,GAAD,OAAWA,KAF5BC,GAFF,EACEC,cADF,EAEED,aACAE,EAHF,EAGEA,UAmBA,OAhBFR,EAAAA,EAAAA,YAAU,YACLQ,EAAUd,aAAae,OAAS,IAAMD,EAAUZ,cAAca,OAAS,KAAIZ,EAAS,SAEnFf,EAAW4B,mBAAmBC,MAC5B,SAAUC,GAERb,GAASc,EAAAA,EAAAA,IAAe,OAAID,EAAYE,KAAKC,YAE/C,SAAUC,GACTnB,EAAS,aAKf,KAGC,UAAC,KAAD,CAAKoB,KAAK,MAAMC,GAAI,OAAQC,GAAI,EAAGC,GAAI,CAAEC,KAAM,EAAGC,GAAI,EAAGC,GAAI,IAA7D,WACE,SAAC,QAAD,CACEC,UAAW,QACXC,SAAU,MACVC,GAAI,EACJC,WAAY,OAJd,2BAQA,SAAC,KAAD,CACEC,QAAS,CAAEP,KAAM,EAAGC,GAAI,EAAGC,GAAI,EAAGM,GAAI,GACtCC,QAAS,CAAET,KAAM,EAAGQ,GAAI,GAF1B,SAIGvB,EAAYyB,KAAI,SAACC,EAAMC,GAAP,OACf,SAAC,MAAD,UAA2BD,GAAXC","sources":["App/hooks.ts","Hooks/useSpotifyWebApi.tsx","constants/envVars.ts","pages/Mylibrary.tsx"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport {RootState, AppDispatch } from './store'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport { SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET } from \"../constants/envVars\";\r\nimport { setSpotifyWebApi } from \"../features/spotifyWebApi/spotifyWebApiSlice\";\r\n\r\nconst useSpotifyWebApi = ():SpotifyWebApi  => {\r\n\r\n  const spotifyApi = new SpotifyWebApi({\r\n    clientId: SPOTIFY_CLIENT_ID,\r\n    clientSecret: SPOTIFY_CLIENT_SECRET,\r\n  })\r\n\r\n  const localTokens: any = localStorage.getItem(\"tokens\");\r\n  const _localTokens = JSON.parse(localTokens)\r\n\r\n\r\n  const localAccessToken = _localTokens?.access_token;\r\n  const localRefreshToken = _localTokens?.refresh_token;\r\n\r\n  const navigate = useNavigate();\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !!_localTokens === false\r\n    ){\r\n     navigate(\"/auth\");\r\n    }\r\n    spotifyApi.setAccessToken(localAccessToken);\r\n    spotifyApi.setRefreshToken(localRefreshToken);\r\n    dispatch(setSpotifyWebApi(spotifyApi));\r\n  }, []);\r\n\r\n  return spotifyApi;\r\n};\r\n\r\nexport default useSpotifyWebApi;\r\n","export const SPOTIFY_CLIENT_ID = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\r\nexport const SPOTIFY_CLIENT_SECRET =\r\n  process.env.REACT_APP_SPOTIFY_CLIENT_SECRET;\r\nexport const SPOTIFY_REDIRECT_URL = process.env.REACT_APP_SPOTIFY_REDIRECT_URL;\r\n","import { Box, chakra, SimpleGrid } from \"@chakra-ui/react\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport { MusicCard } from \"../components\";\r\nimport { setReleases } from \"../features/newReleases/newReleasesSlice\";\r\nimport { setUser } from \"../features/user/userSlice\";\r\nimport { setUserLibrary } from \"../features/userLibrary/userLibrarySlice\";\r\nimport useSpotifyWebApi from \"../Hooks/useSpotifyWebApi\";\r\n\r\nfunction Mylibrary() {\r\n  const spotifyApi: SpotifyWebApi = useSpotifyWebApi();\r\n  const navigate = useNavigate();\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  // REDUX STATES\r\n  const {\r\n    searchResults,\r\n    userLibrary,\r\n    authToken, \r\n  } = useAppSelector((state) => state);\r\n\r\n  useEffect(() => {\r\n    if(authToken.access_token.length < 10 || authToken.refresh_token.length < 10) navigate(\"/auth\")\r\n\r\n        spotifyApi.getMySavedAlbums().then(\r\n          function (userLibData) {\r\n            // Output items\r\n            dispatch(setUserLibrary([...userLibData.body.items]));\r\n          },\r\n          function (err) {\r\n           navigate(\"auth\")\r\n          }\r\n        );\r\n      \r\n        return\r\n  }, []);\r\n  \r\n    return (\r\n      <Box maxW=\"7xl\" mx={\"auto\"} pt={5} px={{ base: 2, sm: 5, md: 17 }}>\r\n        <chakra.h1\r\n          textAlign={\"start\"}\r\n          fontSize={\"2xl\"}\r\n          py={5}\r\n          fontWeight={\"bold\"}\r\n        >\r\n          New Releases\r\n        </chakra.h1>\r\n        <SimpleGrid\r\n          columns={{ base: 1, sm: 2, md: 3, lg: 4 }}\r\n          spacing={{ base: 5, lg: 8 }}\r\n        >\r\n          {userLibrary.map((item, index) => (\r\n            <MusicCard key={index} {...item} />\r\n          ))}\r\n        </SimpleGrid>\r\n      </Box>\r\n    )\r\n  ;\r\n}\r\n\r\nexport default Mylibrary;\r\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","spotifyApi","SpotifyWebApi","clientId","process","clientSecret","localTokens","localStorage","getItem","_localTokens","JSON","parse","localAccessToken","access_token","localRefreshToken","refresh_token","navigate","useNavigate","dispatch","useEffect","setAccessToken","setRefreshToken","setSpotifyWebApi","useSpotifyWebApi","state","userLibrary","searchResults","authToken","length","getMySavedAlbums","then","userLibData","setUserLibrary","body","items","err","maxW","mx","pt","px","base","sm","md","textAlign","fontSize","py","fontWeight","columns","lg","spacing","map","item","index"],"sourceRoot":""}