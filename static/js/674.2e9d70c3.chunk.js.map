{"version":3,"file":"static/js/674.2e9d70c3.chunk.js","mappings":"gMAGaA,EAAiB,kBAAMC,EAAAA,EAAAA,OAEvBC,EAAkDC,EAAAA,I,8JCHzDC,EAAuBC,OAAOC,SAASC,KAmBvCC,EAAeC,UAAU,0CAAD,OAT5B,8EAKAL,EALA,oIAeF,EAFoB,kBAAMC,OAAOC,SAASI,QAAQF,I,2BClB5CG,EAAgBC,EAAAA,GAAAA,KAAA,UACjBC,OAJYC,oCAIO,IAAMD,OAHTC,sCAInBC,SAAS,UAELC,EAAY,IAAIC,QACtBD,EAAUE,OAAO,eAAgB,qCACjCF,EAAUE,OAAO,gBAAjB,gBAA2CP,IAE3C,IA8GA,EA9GqB,WACnB,OAAkCQ,EAAAA,EAAAA,YAAlC,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8BF,EAAAA,EAAAA,YAA9B,eAAOG,EAAP,KAAgBC,EAAhB,KAEA,GAA0BJ,EAAAA,EAAAA,YAA1B,eAAOK,EAAP,KAAcC,EAAd,KAKA,GAAkCN,EAAAA,EAAAA,YAAlC,eAAOO,EAAP,KAAkBC,EAAlB,KACA,GAAwBR,EAAAA,EAAAA,YAAxB,eAAOS,EAAP,KAAaC,EAAb,KAyFA,MAAO,CACLC,eAlFF,SAAwBC,GACtBV,GAAa,GAEb,IAAMW,EAAa,IAAIC,gBACvBD,EAAWd,OAAO,OAAlB,UAA6Ba,IAC7BC,EAAWd,OAAO,eAAlB,UAnCiBJ,+BAoCjBkB,EAAWd,OAAO,aAAc,sBAQhCgB,MAAM,yCANsB,CAC1BC,OAAQ,OACRC,QAASpB,EACTqB,KAAML,IAILM,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,OAAIA,QAAJ,IAAIA,GAAAA,EAAQjB,OACVD,GAAW,GACXE,EAASgB,GACTZ,EAAQ,MACRF,GAAa,KAEbJ,GAAW,GACXE,EAAS,MACTE,GAAa,GACbE,EAAQY,GACRC,aAAaC,QAAQ,SAAUC,KAAKC,UAAUJ,KAEhDpB,GAAa,MAEdyB,OAAM,SAACtB,GACND,GAAW,GACXE,EAASD,GACTG,GAAa,GACbE,EAAQ,MACRR,GAAa,MAGjBA,GAAa,IA4Cb0B,gBAzCF,SAAyBC,GACvB3B,GAAa,GAEb,IAAMW,EAAa,IAAIC,gBACvBD,EAAWd,OAAO,aAAc,iBAQhCgB,MAAM,yCANsB,CAC1BC,OAAQ,OACRC,QAASpB,EACTqB,KAAML,IAILM,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,OAAIA,QAAJ,IAAIA,GAAAA,EAAQjB,OACVD,GAAW,GACXE,EAASgB,GACTZ,EAAQ,QAERN,GAAW,GACXE,EAAS,MACTE,GAAa,GACbE,EAAQY,GACRC,aAAaC,QAAQ,SAAUC,KAAKC,UAAUJ,KAEhDpB,GAAa,MAEdyB,OAAM,SAACtB,GACND,GAAW,GACXE,EAASD,GACTK,EAAQ,MACRF,GAAa,GACbN,GAAa,MAGjBA,GAAa,IAMbD,UAAAA,EACAE,QAAAA,EACAE,MAAAA,EACAE,UAAAA,EACAE,KAAAA,I,qCCJJ,EAjGiB,WACf,OAAuBqB,EAAAA,EAAAA,MAAhBC,GAAP,eACA,EAQIC,IAPFvB,EADF,EACEA,KACAJ,EAFF,EAEEA,MACAM,EAHF,EAGEA,eACAiB,EAJF,EAIEA,gBAEA3B,GANF,EAKEE,QALF,EAMEF,WAGIW,GATN,EAOEL,UAEWwB,EAAaE,IAAI,SACxBC,GAAWrD,EAAAA,EAAAA,KACXsD,GAAWC,EAAAA,EAAAA,MAEXC,EAAkBd,aAAae,QAAQ,UACvCC,EAAed,KAAKe,MAAMH,GAE1BI,GADgB,OAAGF,QAAH,IAAGA,GAAAA,EAAcG,aAChB,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAcI,eACxC,GAAwC5D,EAAAA,EAAAA,IACtC,SAAC6D,GAAD,OAAWA,EAAMC,aADGF,GAAtB,EAAQD,aAAR,EAAsBC,eAgCtB,OA5BAG,EAAAA,EAAAA,YAAU,WACJlC,GACFD,EAAeC,KAEhB,CAACA,KAEJkC,EAAAA,EAAAA,YAAU,WACR,GAAKH,GAAiB,OAAClC,QAAD,IAACA,GAAAA,EAAMsC,WAA7B,CACA,IAAMC,EAAWC,aAAY,WAC3BrB,EAAgBe,GAAiBF,KACN,MAArB,OAAJhC,QAAI,IAAJA,OAAA,EAAAA,EAAMsC,YAAa,KACvB,OAAOG,cAAcF,MACpB,CAACL,EAAD,OAAgBlC,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAMsC,cAEzBD,EAAAA,EAAAA,YAAU,WACJ,OAACrC,QAAD,IAACA,GAAAA,EAAMkC,eAAiB,OAAClC,QAAD,IAACA,GAAAA,EAAMiC,cAE/BjC,GAAI,OAAIA,QAAJ,IAAIA,GAAAA,EAAMiC,eAChBR,GACEiB,EAAAA,EAAAA,GAAS,CACPT,aAAchD,OAAM,OAACe,QAAD,IAACA,OAAD,EAACA,EAAMiC,cAC3BC,cAAejD,OAAM,OAACe,QAAD,IAACA,OAAD,EAACA,EAAMkC,kBAGhCR,EAAS,QAEV,CAAC9B,EAAOI,KAGT,8BAAGR,GAAa,SAAC,KAAD,KACb,UAAC,KAAD,CAAOmD,KAAM,QAASC,UAAW,CAAEC,KAAM,SAAUC,GAAI,MAAOC,GAAI,OAAlE,WACD,SAAC,KAAD,CAAMC,GAAIC,EAAAA,EAAMC,KAAM,CAAC,EAAG,EAAG,GAAIC,MAAO,KAAxC,UACE,SAAC,KAAD,CACEC,IAAK,cACLC,UAAW,QACXC,IACE,qKAIN,SAAC,KAAD,CAAMC,EAAG,EAAGL,KAAM,EAAGM,MAAO,SAAUC,QAAS,SAA/C,UACE,UAAC,KAAD,CAAOC,QAAS,EAAGC,EAAG,OAAQC,KAAM,KAApC,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAASC,SAAU,MAAnB,8CACA,SAAC,KAAD,CAAMC,MAAO,WAAYD,SAAU,CAAEhB,KAAM,KAAMkB,GAAI,MAArD,6CAKF,SAAC,KAAD,CAAOL,QAAS,EAAhB,UACE,SAAC,KAAD,CACEM,UAAU,SAAC,MAAD,IACVC,GAAI,OACJC,QAAS,QACTJ,MAAO,aACPK,OAAQ,CACNL,MAAO,OACPM,gBAAiB,cAEnBC,QAASC,EATX","sources":["App/hooks.ts","services/login.ts","Hooks/useAuthFetch.tsx","pages/Auth.tsx"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport {RootState, AppDispatch } from './store'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","const response_type = \"code\";\r\n\r\nconst redirect_uri: string = window.location.href\r\n\r\nconst client_id = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\r\n\r\n\r\n\r\nconst scope =\r\n  \"user-read-private user-read-email user-read-email user-read-email user-library-read ugc-image-upload user-library-modify\";\r\n\r\nconst authUri =\r\n  \"client_id=\" +\r\n  client_id +\r\n  \"&response_type=\" +\r\n  response_type +\r\n  \"&redirect_uri=\" +\r\n  redirect_uri +\r\n  \"&scope=\" +\r\n  scope;\r\n\r\nconst spotifyLogin = encodeURI(\r\n  `https://accounts.spotify.com/authorize?${authUri}`\r\n);\r\n\r\nconst handleLogin = () => window.location.replace(spotifyLogin);\r\n\r\nexport default handleLogin;\r\n","import { useEffect, useState } from \"react\";\r\nimport { Buffer } from \"buffer\";\r\n\r\nconst redirect_uri = process.env.REACT_APP_SPOTIFY_REDIRECT_URL;\r\nconst clientID = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\r\nconst clientSecret = process.env.REACT_APP_SPOTIFY_CLIENT_SECRET;\r\n\r\nconst base64Encoded = Buffer.from(\r\n  `${String(clientID) + \":\" + String(clientSecret)}`\r\n).toString(\"base64\");\r\n\r\nconst myHeaders = new Headers();\r\nmyHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\nmyHeaders.append(\"authorization\", `Basic ${base64Encoded}`);\r\n\r\nconst useAuthFetch = () => {\r\n  const [isLoading, setIsLoading] = useState<boolean>();\r\n  const [isError, setIsError] = useState<boolean>();\r\n\r\n  const [error, setError] = useState<{\r\n    error: string;\r\n    error_description: string;\r\n  } | null>();\r\n\r\n  const [isSuccess, setIsSuccess] = useState<boolean>();\r\n  const [data, setData] = useState<{\r\n    access_token: string;\r\n    expires_in: number;\r\n    refresh_token: string;\r\n    scope: string;\r\n    token_type: string;\r\n  } | null>();\r\n\r\n  function getAccessToken(code: string) {\r\n    setIsLoading(true);\r\n\r\n    const urlencoded = new URLSearchParams();\r\n    urlencoded.append(\"code\", `${code}`);\r\n    urlencoded.append(\"redirect_uri\", `${redirect_uri}`);\r\n    urlencoded.append(\"grant_type\", \"authorization_code\");\r\n\r\n    const requestOptions: any = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: urlencoded,\r\n    };\r\n\r\n    fetch(\"https://accounts.spotify.com/api/token\", requestOptions)\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        if (result?.error) {\r\n          setIsError(true);\r\n          setError(result);\r\n          setData(null);\r\n          setIsSuccess(false);\r\n        } else {\r\n          setIsError(false);\r\n          setError(null);\r\n          setIsSuccess(true);\r\n          setData(result);\r\n          localStorage.setItem(\"tokens\", JSON.stringify(result));\r\n        }\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        setIsError(true);\r\n        setError(error);\r\n        setIsSuccess(false);\r\n        setData(null);\r\n        setIsLoading(false);\r\n      });\r\n\r\n    setIsLoading(false);\r\n  }\r\n\r\n  function getRefreshToken(refreshToken: string) {\r\n    setIsLoading(true);\r\n\r\n    const urlencoded = new URLSearchParams();\r\n    urlencoded.append(\"grant_type\", \"refresh_token\");\r\n\r\n    const requestOptions: any = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: urlencoded,\r\n    };\r\n\r\n    fetch(\"https://accounts.spotify.com/api/token\", requestOptions)\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        if (result?.error) {\r\n          setIsError(true);\r\n          setError(result);\r\n          setData(null);\r\n        } else {\r\n          setIsError(false);\r\n          setError(null);\r\n          setIsSuccess(true);\r\n          setData(result);\r\n          localStorage.setItem(\"tokens\", JSON.stringify(result));\r\n        }\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        setIsError(true);\r\n        setError(error);\r\n        setData(null);\r\n        setIsSuccess(false);\r\n        setIsLoading(false);\r\n      });\r\n\r\n    setIsLoading(false);\r\n  }\r\n\r\n  return {\r\n    getAccessToken,\r\n    getRefreshToken,\r\n    isLoading,\r\n    isError,\r\n    error,\r\n    isSuccess,\r\n    data,\r\n  };\r\n};\r\n\r\nexport default useAuthFetch;\r\n","/* eslint-disable react-hooks/rules-of-hooks */\r\nimport { FC, ReactElement, useEffect } from \"react\";\r\nimport \"./styles/AuthScreen.css\";\r\nimport {\r\n  Button,\r\n  Flex,\r\n  Heading,\r\n  Stack,\r\n  Image,\r\n  Text,\r\n  Hide,\r\n} from \"@chakra-ui/react\";\r\nimport { FaSpotify } from \"react-icons/fa\";\r\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\r\nimport { handleLogin } from \"../services\";\r\nimport { useAuthFetch } from \"../Hooks\";\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport { setToken } from \"../features/authToken/authTokenSlice\";\r\nimport { ScreenLoading } from \"../components\";\r\n\r\nconst Auth: FC = (): ReactElement => {\r\n  const [searchParams] = useSearchParams();\r\n  const {\r\n    data,\r\n    error,\r\n    getAccessToken,\r\n    getRefreshToken,\r\n    isError,\r\n    isLoading,\r\n    isSuccess,\r\n  } = useAuthFetch();\r\n  const code = searchParams.get(\"code\");\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const localTokens:any = localStorage.getItem(\"tokens\")\r\n  const _localTokens = JSON.parse(localTokens);\r\n  const localAccessToken = _localTokens?.access_token\r\n  const localRefreshToken = _localTokens?.refresh_token\r\n  const { access_token, refresh_token } = useAppSelector(\r\n    (state) => state.authToken\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (code) {\r\n      getAccessToken(code);\r\n    }\r\n  }, [code]);\r\n\r\n  useEffect(() => {\r\n    if (!refresh_token || !data?.expires_in) return;\r\n    const interval = setInterval(() => {\r\n      getRefreshToken(refresh_token || localRefreshToken);\r\n    }, (data?.expires_in - 60) * 1000);\r\n    return clearInterval(interval);\r\n  }, [refresh_token, data?.expires_in]);\r\n\r\n  useEffect(() => {\r\n    if (!data?.refresh_token || !data?.access_token) return;\r\n    // SET DATA TO GLOBAL STORE\r\n    if (data && data?.access_token) {\r\n      dispatch(\r\n        setToken({\r\n          access_token: String(data?.access_token),\r\n          refresh_token: String(data?.refresh_token),\r\n        })\r\n      );\r\n      navigate(\"/\");\r\n    }\r\n  }, [error, data]);\r\n\r\n  return (\r\n    <>{isLoading ? (<ScreenLoading />) : (\r\n       <Stack minH={\"100vh\"} direction={{ base: \"column\", md: \"row\", lg: \"row\" }}>\r\n      <Flex as={Hide} flex={[2, 1, 2]} below={\"sm\"}>\r\n        <Image\r\n          alt={\"Login Image\"}\r\n          objectFit={\"cover\"}\r\n          src={\r\n            \"https://images.unsplash.com/photo-1490476323407-63a2b2baa393?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=892&q=80\"\r\n          }\r\n        />\r\n      </Flex>\r\n      <Flex p={8} flex={1} align={\"center\"} justify={\"center\"}>\r\n        <Stack spacing={4} w={\"full\"} maxW={\"md\"}>\r\n          <Stack>\r\n            <Heading fontSize={\"2xl\"}>Sign In to your Spotify Account</Heading>\r\n            <Text color={\"gray.500\"} fontSize={{ base: \"sm\", sm: \"md\" }}>\r\n              Enjoy non-stop Music Stream\r\n            </Text>\r\n          </Stack>\r\n\r\n          <Stack spacing={6}>\r\n            <Button\r\n              leftIcon={<FaSpotify />}\r\n              bg={\"dark\"}\r\n              variant={\"solid\"}\r\n              color={\"ghostWhite\"}\r\n              _hover={{\r\n                color: \"dark\",\r\n                backgroundColor: \"ghostWhite\",\r\n              }}\r\n              onClick={handleLogin}\r\n            >\r\n              Sign in with Spotify\r\n            </Button>\r\n          </Stack>\r\n        </Stack>\r\n      </Flex>\r\n    </Stack>\r\n    )}\r\n    </>\r\n    \r\n   \r\n  );\r\n};\r\n\r\nexport default Auth;\r\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","redirect_uri","window","location","href","spotifyLogin","encodeURI","replace","base64Encoded","Buffer","String","process","toString","myHeaders","Headers","append","useState","isLoading","setIsLoading","isError","setIsError","error","setError","isSuccess","setIsSuccess","data","setData","getAccessToken","code","urlencoded","URLSearchParams","fetch","method","headers","body","then","response","json","result","localStorage","setItem","JSON","stringify","catch","getRefreshToken","refreshToken","useSearchParams","searchParams","useAuthFetch","get","dispatch","navigate","useNavigate","localTokens","getItem","_localTokens","parse","localRefreshToken","access_token","refresh_token","state","authToken","useEffect","expires_in","interval","setInterval","clearInterval","setToken","minH","direction","base","md","lg","as","Hide","flex","below","alt","objectFit","src","p","align","justify","spacing","w","maxW","fontSize","color","sm","leftIcon","bg","variant","_hover","backgroundColor","onClick","handleLogin"],"sourceRoot":""}